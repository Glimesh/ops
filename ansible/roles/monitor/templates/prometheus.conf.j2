#
# Label standards:
#   instance - hostname of the node (no port/scheme/URL path)
#   app - matches the loki label configs (job labels there are different)
#   job - corresponds to the scrape config (often, but not always the same as app)
#

global:
  scrape_interval: 15s

rule_files:
  # - "first.rules"
  # - "second.rules"

scrape_configs:
  - job_name: 'prometheus'
    #scrape_interval: 5s
    metric_relabel_configs:
      # Drop metrics for irrelevant k8 series' which is currently unused by prometheus (always 0)
      - source_labels: [__name__]
        regex: '^(prometheus_sd_kubernetes).*'
        action: drop
    static_configs:
      - targets: ['localhost:9090']
        labels:
          app: prometheus
          instance: {{ inventory_hostname }}

  - job_name: 'grafana-server'
    scrape_interval: 30s
    static_configs:
      - targets: ['localhost:3000']
        labels:
          app: grafana-server
          instance: {{ inventory_hostname }}

  - job_name: 'loki'
    #scrape_interval: 5s
    metric_relabel_configs:
      # Drop metrics for irrelevant etcd series' which is currently unused by loki (always 0)
      - source_labels: [__name__]
        regex: '^(etcd).*'
        action: drop
    static_configs:
      - targets: ['localhost:3100']
        labels:
          app: loki
          instance: {{ inventory_hostname }}

  - job_name: 'blackbox_exporter'
    scrape_interval: 30s
    static_configs:
      - targets: ['localhost:9115']
        labels:
          instance: {{ inventory_hostname }}

  - job_name: 'caddy'
    scrape_interval: 30s
    metric_relabel_configs:
      # Caddy seemingly has the worst metrics design :(
      - source_labels: [__name__]
        regex: '^(caddy_http_).*'
        action: drop
    static_configs:
      - targets: ['localhost:2019']
        labels:
          app: caddy
          instance: {{ inventory_hostname }}

  - job_name: 'promtail'
    #scrape_interval: 5s
    metric_relabel_configs:
      # promtail_custom metrics will have their own app/job, let's relabel the app only
      - source_labels: [exported_app]
        target_label: app
      # Remove the "exported" labels now we don't need them
      - regex: 'exported_(app|job)'
        action: labeldrop
      # Drop metrics for irrelevant etcd/cortex/prometheus series' which are unused by promtail (always 0)
      - source_labels: [__name__]
        regex: '^(etcd|cortex|prometheus).*'
        action: drop
    static_configs:
{% for host in groups["all"] %}
      - targets: ['{{ host }}:9080']
        labels:
          app: promtail
          instance: {{ host }}
          region: {{ hostvars[host].region }}
{% if hostvars[host].ftl_node_kind is defined %}
          ftl_node_kind: {{ hostvars[host].ftl_node_kind }}
{% endif %}
{% endfor %}

  - job_name: 'node_exporter'
    scrape_interval: 5s
    static_configs:
{% for host in groups["all"] %}
      - targets: ['{{ host }}:9100']
        labels:
          instance: {{ host }}
          region: {{ hostvars[host].region }}
{% if hostvars[host].ftl_node_kind is defined %}
          ftl_node_kind: {{ hostvars[host].ftl_node_kind }}
{% endif %}
{% endfor %}

  - job_name: 'promex'
    scrape_interval: 5s
    metrics_path: /metrics
    authorization:
      credentials: "{{ glimesh_promex_auth_token }}"
    static_configs:
{% for host in groups["web"] %}
      - targets: ['{{ host }}:4021']
        labels:
          instance: {{ host }}
          region: {{ hostvars[host].region }}
{% endfor %}

  - job_name: 'janus_http'
    scrape_interval: 5s
    metrics_path: /probe
    params:
      module: [http_json_200]  # Look for a HTTP 200 with JSON data
    relabel_configs:
      # Use the given address ("target") and turn it into a __param used to query the blackbox_exporter
      - source_labels: [__address__]
        target_label: __param_target
      # Prometheus needs the address of the blackbox_exporter
      - target_label: __address__
        replacement: localhost:9115  # The blackbox exporter's real hostname:port.
    static_configs:
{% for host in groups['ftl_edge'] %}
{% if inventory_hostname != host %}
      - targets: ['https://{{ host }}/janus/info']
        labels:
          app: janus
          instance: {{ host }}
          region: {{ hostvars[host].region }}
          ftl_node_kind: {{ hostvars[host].ftl_node_kind }}
{% endif %}
{% endfor %}


  - job_name: 'janus_ftl_ping'
    scrape_interval: 5s
    metrics_path: /probe
    params:
      module: [ftl_ping]  # Look for a 201 response to a PING
    relabel_configs:
      # Use the given address ("target") and turn it into a __param used to query the blackbox_exporter
      - source_labels: [__address__]
        target_label: __param_target
      # Prometheus needs the address of the blackbox_exporter
      - target_label: __address__
        replacement: localhost:9115  # The blackbox exporter's real hostname:port.
    static_configs:
{% for host in (groups['ftl_ingest'] + groups['ftl_edge']) %}
{% if inventory_hostname != host %}
      - targets: ['{{ host }}:8084']
        labels:
          app: janus
          instance: {{ host }}
          region: {{ hostvars[host].region }}
          ftl_node_kind: {{ hostvars[host].ftl_node_kind }}
{% endif %}
{% endfor %}
