# Rule 1 of Loki/promtail is limit the use of dynamic labels
# Ideally, ensure there is a set limit of values for them
# Every new label value increases the Loki streams
#
# Timestamp parsing is probably a bad route for journald logs as it already
# will have reliably/accuaretly recorded at the ms level.
# Might be worth doing for conventional file based logs when they are relevant.

server:
  # Random port is chosen when 0
  http_listen_address: 0.0.0.0
  http_listen_port: 9080
  grpc_listen_address: localhost
  grpc_listen_port: 0

positions:
  filename: /data/promtail/positions.yaml

clients:
  - url: https://{{ loki_host }}/loki/api/v1/push
    batchwait: {{ promtail_log_batchwait_seconds }}s
    basic_auth:
      username: promtail
      password: {{ loki_caddy_basicauth_promtail }}
    tls_config:
      insecure_skip_verify: {{ loki_skip_verify }}
    external_labels:
      instance: {{ inventory_hostname }}
      region: {{ region }}

scrape_configs:
  # This is far from ideal - we aren't properly considering the file timestamps for example
  # But, it's a suitable catchall with static labels
  - job_name: system-varlogs
    static_configs:
    - targets:
        - localhost
      labels:
        job: varlogs
        # Match all the *.log + the apt/history.log (exclude syslog)
        __path__: /var/log/{*,apt/history}.log

    pipeline_stages:
      - match:
          # Skip the auth (SSHd) and kernel logs which already end up in journald
          selector: '{filename=~"/var/log/(auth.log|kern.log)"}'
          action: drop
          drop_counter_reason: promtail_duplicate_logs


  - job_name: journal
    journal:
      # The journald labels are already available, but this logs them
      json: true
      max_age: 12h

      labels:
        job: systemd-journal

    relabel_configs:
      # We take the systemd service name and set as the "app" label
      # This is only okay because we remove the label for generic services, later
      - action: replace
        source_labels: ['__journal__systemd_unit']
        regex: (.*)\.service
        target_label: app

    pipeline_stages:

      # This stage is only going to run for caddy.service
      - match:
          selector: '{app="caddy"}'
          pipeline_name: caddy
          stages:
            # While the journald keys are already "private" labels, we must decode the JSON to get the MESSAGE key
            - json:
                expressions:
                  caddy_message: MESSAGE
            # Second JSON decode is needed as the Caddy logs are encoded
            - json:
                expressions:
                  # We grab the TLS servername - this is the cert we served and limited by the Caddy config
                  server_name: request.tls.server_name
                  # The Host header shouldn't be put into a label as technically user controlled
                  http_host: request.host
                  http_method: request.method
                  msg:
                  size:
                  duration:
                source: caddy_message

            # Add the server_name as a label (as the values are constrained)
            # Add the method for the metrics only
            - labels:
                server_name:
                method: http_method

            - metrics:
                caddy_http_response_duration_seconds:
                  type: Histogram
                  description: "Histogram of times to first byte in response bodies"
                  source: duration
                  # The labels are defined so the /metrics won't grow uncontrollably, set long idle timer
                  max_idle_duration: 12h
                  config:
                    buckets: [0.001,0.0025,0.005,0.010,0.025,0.050,0.10,0.50,1.00,2.50,5.00]

            # Remove now we no longer need it
            - labeldrop:
                - method


      # This is crucial as it ensure the "app" values are defined/constrained (and avoids many Loki streams)
      # These more generic logs journald can be examined with a search of {app="generic"}
      - match:
          # All the services we are specifically interested in won't have their label changed
          selector: '{app!~"{{ promtail_journald_app_whitelist }}"}'
          pipeline_name: generic_app
          stages:
            # Create a new var
            - template:
                source: _generic_app_name
                template: "generic"
            # Use new var to set "app" label
            - labels:
                app: _generic_app_name

